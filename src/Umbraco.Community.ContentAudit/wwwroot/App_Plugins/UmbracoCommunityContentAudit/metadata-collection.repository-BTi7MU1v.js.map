{"version":3,"file":"metadata-collection.repository-BTi7MU1v.js","sources":["../../../../Umbraco.Community.ContentAudit.UI/src/section/metadata/collection/repository/metadata-collection.server.data-source.ts","../../../../Umbraco.Community.ContentAudit.UI/src/section/metadata/collection/repository/metadata-collection.repository.ts"],"sourcesContent":["import { UmbCollectionDataSource, UmbCollectionFilterModel } from \"@umbraco-cms/backoffice/collection\";\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { AuditService, PageAnalysisDto } from \"../../../../api\";\r\nimport { tryExecuteAndNotify } from \"@umbraco-cms/backoffice/resources\";\r\n\r\nexport class ContentAuditMetadataCollectionDataSource implements UmbCollectionDataSource<PageAnalysisDto> {\r\n    #host: UmbControllerHost;\r\n\r\n    constructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n    }\r\n\r\n\tasync getCollection(filter: UmbCollectionFilterModel) {\r\n\t\tconst { data, error } = await tryExecuteAndNotify(this.#host, AuditService.getPagesWithMissingMetadata(filter));\r\n\r\n\t\tif (error) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\tif (!data) {\r\n\t\t\treturn { data: { items: [], total: 0 } };\r\n\t\t}\r\n\r\n\t\tconst { items, total } = data;\r\n\r\n\t\treturn { data: { items: items, total } };\r\n\t}\r\n}","import { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbCollectionFilterModel, UmbCollectionRepository } from '@umbraco-cms/backoffice/collection';\r\nimport { ContentAuditMetadataCollectionDataSource } from \"./metadata-collection.server.data-source\";\r\nimport { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { PageAnalysisDto } from '../../../../api';\r\n\r\nexport class ContentAuditMetadataCollectionRepository extends UmbRepositoryBase implements UmbCollectionRepository<PageAnalysisDto, UmbCollectionFilterModel> {\r\n    #collectionSource: ContentAuditMetadataCollectionDataSource;\r\n\r\n    constructor(host: UmbControllerHost) {\r\n        super(host);\r\n        this.#collectionSource = new ContentAuditMetadataCollectionDataSource(host);\r\n    }\r\n\r\n    async requestCollection(filter: UmbCollectionFilterModel) {\r\n        return this.#collectionSource.getCollection(filter);\r\n    }\r\n}\r\n\r\nexport default ContentAuditMetadataCollectionRepository;"],"names":["ContentAuditMetadataCollectionDataSource","host","__privateAdd","_host","__privateSet","filter","data","error","tryExecuteAndNotify","__privateGet","AuditService","items","total","ContentAuditMetadataCollectionRepository","UmbRepositoryBase","_collectionSource"],"mappings":";;;;;;;;;AAKO,MAAMA,EAA6F;AAAA,EAGtG,YAAYC,GAAyB;AAFrC,IAAAC,EAAA,MAAAC;AAGF,IAAAC,EAAA,MAAKD,GAAQF;AAAA,EAAA;AAAA,EAGd,MAAM,cAAcI,GAAkC;AAC/C,UAAA,EAAE,MAAAC,GAAM,OAAAC,EAAU,IAAA,MAAMC,EAAoBC,EAAA,MAAKN,IAAOO,EAAa,4BAA4BL,CAAM,CAAC;AAE9G,QAAIE;AACH,aAAO,EAAE,OAAAA,EAAM;AAGhB,QAAI,CAACD;AACG,aAAA,EAAE,MAAM,EAAE,OAAO,CAAA,GAAI,OAAO,IAAI;AAGlC,UAAA,EAAE,OAAAK,GAAO,OAAAC,EAAA,IAAUN;AAEzB,WAAO,EAAE,MAAM,EAAE,OAAAK,GAAc,OAAAC,IAAQ;AAAA,EAAA;AAEzC;AArBIT,IAAA;;ACAG,MAAMU,UAAiDC,EAAgG;AAAA,EAG1J,YAAYb,GAAyB;AACjC,UAAMA,CAAI;AAHd,IAAAC,EAAA,MAAAa;AAIS,IAAAX,EAAA,MAAAW,GAAoB,IAAIf,EAAyCC,CAAI;AAAA,EAAA;AAAA,EAG9E,MAAM,kBAAkBI,GAAkC;AAC/C,WAAAI,EAAA,MAAKM,GAAkB,cAAcV,CAAM;AAAA,EAAA;AAE1D;AAVIU,IAAA;"}