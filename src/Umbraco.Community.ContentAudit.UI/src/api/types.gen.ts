// This file is auto-generated by @hey-api/openapi-ts

export type AccessibilityDto = {
    id: number;
    runId: number;
    url?: string | null;
    accessibilityIssues?: Array<string> | null;
    ariaLabelCount: number;
    ariaDescribedByCount: number;
    hasSkipToContent: boolean;
    hasProperHeadingStructure: boolean;
    colorContrastIssues?: Array<string> | null;
    createdDate: string;
};

export type AuditIssueProperty = {
    name?: string | null;
    alias?: string | null;
    labelTemplate?: string | null;
    elementName?: string | null;
};

export type ContentAnalysisDto = {
    id: number;
    runId: number;
    url?: string | null;
    wordCount: number;
    paragraphCount: number;
    images: number;
    resources: number;
    links: number;
    externalLinks: number;
    internalLinks: number;
    readabilityScore: number;
    keywordDensity?: {
        [key: string]: number;
    } | null;
    missingAltTextImages?: string | null;
    missingTitleImages?: string | null;
};

export type ContentAuditSettings = {
    respectRobotsTxt: boolean;
    useUmbracoContentIndex: boolean;
    useSitemapXml: boolean;
    sitemapUrl: string;
    maxConcurrentCrawls: number;
    baseUrl: string;
};

export type ContentQualityDto = {
    id: number;
    runId: number;
    url?: string | null;
    hasDuplicateContent: boolean;
    duplicateContentUrls?: Array<string> | null;
    hasThinContent: boolean;
    contentScore: number;
    contentGaps?: Array<string> | null;
    contentStrengths?: Array<string> | null;
    createdDate: string;
};

export type CrawlDto = {
    url?: string | null;
    external: boolean;
    asset: boolean;
    crawled: boolean;
    blocked: boolean;
    unique: string;
};

export type EmissionsDto = {
    emissionsPerPageView: number;
    carbonRating?: string | null;
};

export type HealthScoreDto = {
    healthScore: number;
    totalPages: number;
    pagesWithErrors: number;
};

export type ImageDto = {
    entityType: string;
    id: number;
    runId: number;
    url?: string | null;
    isExternal: boolean;
    size?: number | null;
    statusCode: number;
    contentType?: string | null;
    altText?: string | null;
    title?: string | null;
    foundPage?: string | null;
    unique: string;
    createdDate: string;
    isBackground: boolean;
};

export type IssueDto = {
    unique: string;
    entityType: string;
    name: string;
    description: string;
    category: string;
    type: IssueType;
    priority: IssuePriority;
    numberOfUrls?: number | null;
    percentOfTotal: number;
    pages?: Array<PageAnalysisDto> | null;
    images?: Array<ImageDto> | null;
    exposedProperties?: Array<AuditIssueProperty> | null;
    priorityScore: number;
};

export enum IssuePriority {
    LOW = 'Low',
    MEDIUM = 'Medium',
    HIGH = 'High'
}

export enum IssueType {
    OPPORTUNITY = 'Opportunity',
    WARNING = 'Warning',
    ISSUE = 'Issue'
}

export type LinkDto = {
    unique: string;
    entityType: string;
    id: number;
    runId: number;
    url?: string | null;
    isExternal: boolean;
    foundPage?: string | null;
    statusCode: number;
    contentType?: string | null;
    createdDate: string;
};

export type LinkGroupDto = {
    unique: string;
    entityType: string;
    url?: string | null;
    statusCode?: number | null;
    contentType?: string | null;
    links?: Array<LinkDto> | null;
};

export type MetricDto = {
    name: MetricName;
    value: number;
    rating: MetricRating;
};

export enum MetricName {
    CLS = 'CLS',
    FCP = 'FCP',
    FID = 'FID',
    INP = 'INP',
    LCP = 'LCP',
    TTFB = 'TTFB'
}

export enum MetricRating {
    GOOD = 'Good',
    NEEDS_IMPROVEMENT = 'NeedsImprovement',
    POOR = 'Poor'
}

export type OverviewDto = {
    runDate?: string | null;
    total?: number | null;
    totalInternal?: number | null;
    totalExternal?: number | null;
    totalAssets?: number | null;
    totalBlocked?: number | null;
};

export type PageAnalysisDto = {
    unique: string;
    entityType: string;
    links: Array<LinkDto>;
    resources: Array<ResourceDto>;
    images: Array<ImageDto>;
    issues: Array<IssueDto>;
    healthScore: HealthScoreDto;
    pageData: PageDto;
    seoData: SeoDto;
    contentAnalysis: ContentAnalysisDto;
    performanceData: PerformanceDto;
    accessibilityData: AccessibilityDto;
    technicalSeoData: TechnicalSeoDto;
    socialMediaData: SocialMediaDto;
    contentQualityData: ContentQualityDto;
    emissionsData: EmissionsDto;
};

export type PageDto = {
    entityType: string;
    id: number;
    runId: number;
    url?: string | null;
    redirect: boolean;
    redirectUrl?: string | null;
    unique: string;
    statusCode: number;
};

export type PagedImageDtoModel = {
    total: number;
    items: Array<ImageDto>;
};

export type PagedIssueDtoModel = {
    total: number;
    items: Array<IssueDto>;
};

export type PagedLinkGroupDtoModel = {
    total: number;
    items: Array<LinkGroupDto>;
};

export type PagedPageAnalysisDtoModel = {
    total: number;
    items: Array<PageAnalysisDto>;
};

export type PagedPageDtoModel = {
    total: number;
    items: Array<PageDto>;
};

export type PerformanceDto = {
    id: number;
    runId: number;
    url?: string | null;
    pageLoadTime?: number | null;
    cumulativeLayoutShift?: MetricDto | null;
    firstContentfulPaint?: MetricDto | null;
    largestContentfulPaint?: MetricDto | null;
    timeToInteractive?: MetricDto | null;
    timeToFirstByte?: MetricDto | null;
    totalRequests?: number | null;
    totalBytes?: number | null;
    resourceTimings?: Array<ResourceTimingDto> | null;
    createdDate: string;
};

export type ResourceDto = {
    entityType: string;
    id: number;
    runId: number;
    url?: string | null;
    isExternal: boolean;
    size?: number | null;
    statusCode: number;
    contentType?: string | null;
    foundPage?: string | null;
    unique: string;
    createdDate: string;
};

export type ResourceTimingDto = {
    url?: string | null;
    resourceType?: string | null;
    duration?: number | null;
    startTime?: number | null;
    size?: number | null;
};

export type SeoDto = {
    runId: number;
    url?: string | null;
    title?: string | null;
    metaDescription?: string | null;
    canonicalUrl?: string | null;
    h1?: string | null;
    h2s?: Array<string> | null;
    h3s?: Array<string> | null;
    hasNoIndex: boolean;
    hasNoFollow: boolean;
    isOrphaned: boolean;
    openGraphTitle?: string | null;
    openGraphDescription?: string | null;
    openGraphImage?: string | null;
    twitterCard?: string | null;
    twitterTitle?: string | null;
    twitterDescription?: string | null;
    twitterImage?: string | null;
    createdDate: string;
};

export type SocialMediaDto = {
    id: number;
    runId: number;
    url?: string | null;
    socialShareButtons?: Array<string> | null;
    hasFacebookPixel: boolean;
    hasTwitterPixel: boolean;
    hasLinkedInPixel: boolean;
    socialMediaLinks?: Array<string> | null;
    createdDate: string;
};

export type TechnicalSeoDto = {
    id: number;
    runId: number;
    url?: string | null;
    contentType?: string | null;
    charset?: string | null;
    hasGzipCompression: boolean;
    hasBrowserCaching: boolean;
    hasHttps: boolean;
    hasValidHtml: boolean;
    htmlValidationErrors?: Array<string> | null;
    hasSchemaMarkup: boolean;
    schemaType?: string | null;
    createdDate: string;
};

export type GetAllImagesData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        take?: number;
        filter?: string;
    };
    url: '/umbraco/content-audit/api/v1/all-images';
};

export type GetAllImagesResponses = {
    /**
     * OK
     */
    200: PagedImageDtoModel;
};

export type GetAllImagesResponse = GetAllImagesResponses[keyof GetAllImagesResponses];

export type GetAllIssuesData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        take?: number;
    };
    url: '/umbraco/content-audit/api/v1/all-issues';
};

export type GetAllIssuesResponses = {
    /**
     * OK
     */
    200: PagedIssueDtoModel;
};

export type GetAllIssuesResponse = GetAllIssuesResponses[keyof GetAllIssuesResponses];

export type GetDuplicateContentUrlsData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        take?: number;
        filter?: string;
    };
    url: '/umbraco/content-audit/api/v1/duplicate-content';
};

export type GetDuplicateContentUrlsResponses = {
    /**
     * OK
     */
    200: PagedPageDtoModel;
};

export type GetDuplicateContentUrlsResponse = GetDuplicateContentUrlsResponses[keyof GetDuplicateContentUrlsResponses];

export type GetExportDataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/content-audit/api/v1/export';
};

export type GetExportDataResponses = {
    /**
     * OK
     */
    200: Blob | File;
};

export type GetExportDataResponse = GetExportDataResponses[keyof GetExportDataResponses];

export type GetExternalLinksData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        take?: number;
        filter?: string;
    };
    url: '/umbraco/content-audit/api/v1/external-links';
};

export type GetExternalLinksResponses = {
    /**
     * OK
     */
    200: PagedLinkGroupDtoModel;
};

export type GetExternalLinksResponse = GetExternalLinksResponses[keyof GetExternalLinksResponses];

export type GetHealthScoreData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/content-audit/api/v1/health-score';
};

export type GetHealthScoreResponses = {
    /**
     * OK
     */
    200: HealthScoreDto;
};

export type GetHealthScoreResponse = GetHealthScoreResponses[keyof GetHealthScoreResponses];

export type GetInteralLinksData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        take?: number;
        filter?: string;
    };
    url: '/umbraco/content-audit/api/v1/internal-links';
};

export type GetInteralLinksResponses = {
    /**
     * OK
     */
    200: PagedLinkGroupDtoModel;
};

export type GetInteralLinksResponse = GetInteralLinksResponses[keyof GetInteralLinksResponses];

export type GetIssueData = {
    body?: never;
    path?: never;
    query?: {
        issueGuid?: string;
    };
    url: '/umbraco/content-audit/api/v1/issue';
};

export type GetIssueResponses = {
    /**
     * OK
     */
    200: IssueDto;
};

export type GetIssueResponse = GetIssueResponses[keyof GetIssueResponses];

export type GetLatestAuditOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/content-audit/api/v1/latest-audit';
};

export type GetLatestAuditOverviewResponses = {
    /**
     * OK
     */
    200: OverviewDto;
};

export type GetLatestAuditOverviewResponse = GetLatestAuditOverviewResponses[keyof GetLatestAuditOverviewResponses];

export type GetLatestAuditDataData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        take?: number;
        filter?: string;
        statusCode?: number;
    };
    url: '/umbraco/content-audit/api/v1/latest-data';
};

export type GetLatestAuditDataResponses = {
    /**
     * OK
     */
    200: PagedPageAnalysisDtoModel;
};

export type GetLatestAuditDataResponse = GetLatestAuditDataResponses[keyof GetLatestAuditDataResponses];

export type GetLatestPageAuditDataData = {
    body?: never;
    path?: never;
    query?: {
        unique?: string;
    };
    url: '/umbraco/content-audit/api/v1/latest-page-data';
};

export type GetLatestPageAuditDataResponses = {
    /**
     * OK
     */
    200: PageAnalysisDto;
};

export type GetLatestPageAuditDataResponse = GetLatestPageAuditDataResponses[keyof GetLatestPageAuditDataResponses];

export type GetPagesWithMissingMetadataData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        take?: number;
        filter?: string;
    };
    url: '/umbraco/content-audit/api/v1/missing-metadata';
};

export type GetPagesWithMissingMetadataResponses = {
    /**
     * OK
     */
    200: PagedPageAnalysisDtoModel;
};

export type GetPagesWithMissingMetadataResponse = GetPagesWithMissingMetadataResponses[keyof GetPagesWithMissingMetadataResponses];

export type GetOrphanedPagesData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        take?: number;
        filter?: string;
    };
    url: '/umbraco/content-audit/api/v1/orphaned-pages';
};

export type GetOrphanedPagesResponses = {
    /**
     * OK
     */
    200: PagedPageDtoModel;
};

export type GetOrphanedPagesResponse = GetOrphanedPagesResponses[keyof GetOrphanedPagesResponses];

export type StartCrawlData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/content-audit/api/v1/start-crawl';
};

export type StartCrawlResponses = {
    /**
     * OK
     */
    200: Array<CrawlDto>;
};

export type StartCrawlResponse = StartCrawlResponses[keyof StartCrawlResponses];

export type GetSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/content-audit/api/v1/get-settings';
};

export type GetSettingsResponses = {
    /**
     * OK
     */
    200: ContentAuditSettings;
};

export type GetSettingsResponse = GetSettingsResponses[keyof GetSettingsResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:26293' | (string & {});
};