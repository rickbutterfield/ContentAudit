// This file is auto-generated by @hey-api/openapi-ts

export type AccessibilityDto = {
    id: number;
    runId: number;
    url?: string | null;
    accessibilityIssues?: Array<(string)> | null;
    ariaLabelCount: number;
    ariaDescribedByCount: number;
    hasSkipToContent: boolean;
    hasProperHeadingStructure: boolean;
    colorContrastIssues?: Array<(string)> | null;
    createdDate: string;
};

export type AuditIssueProperty = {
    name?: string | null;
    alias?: string | null;
    labelTemplate?: string | null;
    elementName?: string | null;
};

export type ContentAnalysisDto = {
    id: number;
    runId: number;
    url?: string | null;
    wordCount: number;
    paragraphCount: number;
    images: number;
    resources: number;
    links: number;
    externalLinks: number;
    internalLinks: number;
    readabilityScore: number;
    keywordDensity?: {
        [key: string]: (number);
    } | null;
    missingAltTextImages?: string | null;
    missingTitleImages?: string | null;
    createdDate: string;
};

export type ContentAuditSettings = {
    respectRobotsTxt: boolean;
    useUmbracoContentIndex: boolean;
    useSitemapXml: boolean;
    sitemapUrl: string;
    maxConcurrentCrawls: number;
};

export type ContentQualityDto = {
    id: number;
    runId: number;
    url?: string | null;
    hasDuplicateContent: boolean;
    duplicateContentUrls?: Array<(string)> | null;
    hasThinContent: boolean;
    contentScore: number;
    contentGaps?: Array<(string)> | null;
    contentStrengths?: Array<(string)> | null;
    createdDate: string;
};

export type CrawlDto = {
    url?: string | null;
    external: boolean;
    asset: boolean;
    crawled: boolean;
    blocked: boolean;
    nodeKey: string;
};

export type ExternalPageDto = {
    unique: string;
    entityType: string;
    id: number;
    url?: string | null;
    nodeKey?: string | null;
    foundPage?: string | null;
    statusCode: number;
    contentType?: string | null;
};

export type ExternalPageGroupDto = {
    unique: string;
    entityType: string;
    url?: string | null;
    statusCode?: number | null;
    contentType?: string | null;
    externalPages?: Array<(ExternalPageDto)> | null;
};

export type HealthScoreDto = {
    healthScore: number;
    totalPages: number;
    pagesWithErrors: number;
};

export type ImageDto = {
    unique: string;
    entityType: string;
    url: string;
    size?: number | null;
    statusCode: number;
    contentType?: string | null;
    foundPage?: string | null;
    nodeKey?: string | null;
    isExternal: boolean;
    isBackground: boolean;
    altText?: string | null;
};

export type InternalPageDto = {
    unique: string;
    entityType: string;
    id: number;
    url: string;
    nodeKey?: string | null;
    pageBytes?: number | null;
    statusCode: number;
    contentType?: string | null;
    emissionsPerPageView?: number | null;
    carbonRating?: string | null;
};

export type InternalPageGroupDto = {
    unique: string;
    entityType: string;
    url?: string | null;
    statusCode?: number | null;
    contentType?: string | null;
    internalPages?: Array<(InternalPageDto)> | null;
};

export type IssueDto = {
    unique: string;
    entityType: string;
    name: string;
    description: string;
    category: string;
    type: IssueType;
    priority: IssuePriority;
    numberOfUrls?: number | null;
    percentOfTotal: number;
    pages?: Array<(InternalPageDto)> | null;
    images?: Array<(ImageDto)> | null;
    exposedProperties?: Array<(AuditIssueProperty)> | null;
    priorityScore: number;
};

export enum IssuePriority {
    LOW = 'Low',
    MEDIUM = 'Medium',
    HIGH = 'High'
}

export enum IssueType {
    OPPORTUNITY = 'Opportunity',
    WARNING = 'Warning',
    ISSUE = 'Issue'
}

export type OverviewDto = {
    runDate?: string | null;
    total?: number | null;
    totalInternal?: number | null;
    totalExternal?: number | null;
    totalAssets?: number | null;
    totalBlocked?: number | null;
};

export type PageAnalysisDto = {
    unique: string;
    entityType: string;
    links?: Array<(string)> | null;
    resources?: Array<(ResourceDto)> | null;
    images?: Array<(ImageDto)> | null;
    pageData?: PageDto | null;
    seoData?: SeoDto | null;
    contentAnalysis?: ContentAnalysisDto | null;
    performanceData?: PerformanceDto | null;
    accessibilityData?: AccessibilityDto | null;
    technicalSeoData?: TechnicalSeoDto | null;
    socialMediaData?: SocialMediaDto | null;
    contentQualityData?: ContentQualityDto | null;
};

export type PageDto = {
    id: number;
    runId: number;
    url?: string | null;
    nodeKey?: string | null;
    statusCode: number;
};

export type PagedExternalPageGroupDtoModel = {
    total: number;
    items: Array<(ExternalPageGroupDto)>;
};

export type PagedImageDtoModel = {
    total: number;
    items: Array<(ImageDto)>;
};

export type PagedInternalPageDtoModel = {
    total: number;
    items: Array<(InternalPageDto)>;
};

export type PagedInternalPageGroupDtoModel = {
    total: number;
    items: Array<(InternalPageGroupDto)>;
};

export type PagedIssueDtoModel = {
    total: number;
    items: Array<(IssueDto)>;
};

export type PagedPageAnalysisDtoModel = {
    total: number;
    items: Array<(PageAnalysisDto)>;
};

export type PerformanceDto = {
    id: number;
    runId: number;
    url?: string | null;
    pageLoadTime?: number | null;
    firstContentfulPaint?: number | null;
    largestContentfulPaint?: number | null;
    timeToInteractive?: number | null;
    totalRequests?: number | null;
    totalBytes?: number | null;
    resourceTimings?: Array<(ResourceTimingDto)> | null;
    createdDate: string;
};

export type ResourceDto = {
    url: string;
    isExternal: boolean;
    size?: number | null;
    statusCode: number;
    contentType?: string | null;
    foundPage?: string | null;
    nodeKey?: string | null;
};

export type ResourceTimingDto = {
    url?: string | null;
    resourceType?: string | null;
    duration?: number | null;
    startTime?: number | null;
    size?: number | null;
};

export type SeoDto = {
    runId: number;
    url?: string | null;
    title?: string | null;
    metaDescription?: string | null;
    canonicalUrl?: string | null;
    h1?: string | null;
    h2s?: Array<(string)> | null;
    h3s?: Array<(string)> | null;
    hasNoIndex: boolean;
    hasNoFollow: boolean;
    openGraphTitle?: string | null;
    openGraphDescription?: string | null;
    openGraphImage?: string | null;
    twitterCard?: string | null;
    twitterTitle?: string | null;
    twitterDescription?: string | null;
    twitterImage?: string | null;
    createdDate: string;
};

export type SocialMediaDto = {
    id: number;
    runId: number;
    url?: string | null;
    socialShareButtons?: Array<(string)> | null;
    hasFacebookPixel: boolean;
    hasTwitterPixel: boolean;
    hasLinkedInPixel: boolean;
    socialMediaLinks?: Array<(string)> | null;
    createdDate: string;
};

export type TechnicalSeoDto = {
    id: number;
    runId: number;
    url?: string | null;
    contentType?: string | null;
    charset?: string | null;
    hasGzipCompression: boolean;
    hasBrowserCaching: boolean;
    hasHttps: boolean;
    hasValidHtml: boolean;
    htmlValidationErrors?: Array<(string)> | null;
    hasSchemaMarkup: boolean;
    schemaType?: string | null;
    createdDate: string;
};

export type GetAllImagesData = {
    filter?: string;
    skip?: number;
    take?: number;
};

export type GetAllImagesResponse = PagedImageDtoModel;

export type GetAllIssuesData = {
    skip?: number;
    take?: number;
};

export type GetAllIssuesResponse = PagedIssueDtoModel;

export type GetDuplicateContentUrlsData = {
    filter?: string;
    skip?: number;
    take?: number;
};

export type GetDuplicateContentUrlsResponse = PagedInternalPageGroupDtoModel;

export type GetExternalLinksData = {
    filter?: string;
    skip?: number;
    take?: number;
};

export type GetExternalLinksResponse = PagedExternalPageGroupDtoModel;

export type GetHealthScoreResponse = HealthScoreDto;

export type GetInteralLinksData = {
    filter?: string;
    skip?: number;
    take?: number;
};

export type GetInteralLinksResponse = PagedInternalPageGroupDtoModel;

export type GetIssueData = {
    issueGuid?: string;
};

export type GetIssueResponse = IssueDto;

export type GetLatestAuditOverviewResponse = OverviewDto;

export type GetLatestAuditDataData = {
    filter?: string;
    skip?: number;
    statusCode?: number;
    take?: number;
};

export type GetLatestAuditDataResponse = PagedPageAnalysisDtoModel;

export type GetPagesWithMissingMetadataData = {
    filter?: string;
    skip?: number;
    take?: number;
};

export type GetPagesWithMissingMetadataResponse = PagedInternalPageDtoModel;

export type GetOrphanedPagesData = {
    filter?: string;
    skip?: number;
    take?: number;
};

export type GetOrphanedPagesResponse = PagedInternalPageDtoModel;

export type StartCrawlResponse = Array<(CrawlDto)>;

export type GetSettingsResponse = ContentAuditSettings;

export type $OpenApiTs = {
    '/umbraco/content-audit/api/v1/all-images': {
        get: {
            req: GetAllImagesData;
            res: {
                /**
                 * OK
                 */
                200: PagedImageDtoModel;
            };
        };
    };
    '/umbraco/content-audit/api/v1/all-issues': {
        get: {
            req: GetAllIssuesData;
            res: {
                /**
                 * OK
                 */
                200: PagedIssueDtoModel;
            };
        };
    };
    '/umbraco/content-audit/api/v1/duplicate-content': {
        get: {
            req: GetDuplicateContentUrlsData;
            res: {
                /**
                 * OK
                 */
                200: PagedInternalPageGroupDtoModel;
            };
        };
    };
    '/umbraco/content-audit/api/v1/external-links': {
        get: {
            req: GetExternalLinksData;
            res: {
                /**
                 * OK
                 */
                200: PagedExternalPageGroupDtoModel;
            };
        };
    };
    '/umbraco/content-audit/api/v1/health-score': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: HealthScoreDto;
            };
        };
    };
    '/umbraco/content-audit/api/v1/internal-links': {
        get: {
            req: GetInteralLinksData;
            res: {
                /**
                 * OK
                 */
                200: PagedInternalPageGroupDtoModel;
            };
        };
    };
    '/umbraco/content-audit/api/v1/issue': {
        get: {
            req: GetIssueData;
            res: {
                /**
                 * OK
                 */
                200: IssueDto;
            };
        };
    };
    '/umbraco/content-audit/api/v1/latest-audit': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: OverviewDto;
            };
        };
    };
    '/umbraco/content-audit/api/v1/latest-data': {
        get: {
            req: GetLatestAuditDataData;
            res: {
                /**
                 * OK
                 */
                200: PagedPageAnalysisDtoModel;
            };
        };
    };
    '/umbraco/content-audit/api/v1/missing-metadata': {
        get: {
            req: GetPagesWithMissingMetadataData;
            res: {
                /**
                 * OK
                 */
                200: PagedInternalPageDtoModel;
            };
        };
    };
    '/umbraco/content-audit/api/v1/orphaned-pages': {
        get: {
            req: GetOrphanedPagesData;
            res: {
                /**
                 * OK
                 */
                200: PagedInternalPageDtoModel;
            };
        };
    };
    '/umbraco/content-audit/api/v1/start-crawl': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Array<(CrawlDto)>;
            };
        };
    };
    '/umbraco/content-audit/api/v1/get-settings': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: ContentAuditSettings;
            };
        };
    };
};